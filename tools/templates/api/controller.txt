from uuid import UUID
from api.abstractEntity.abstractController import AbstractController
from domain.DTOs.stringDTO import StringDTO
from domain.option.option import Option
from domain.{model}s.{model} import {Model}
from services.{model}s.{model}Service import {Model}Service

class {Model}Controller(AbstractController[{Model}]):
    def __init__(self):
        super().__init__({Model})
        self.defineRoutes()


    def defineRoutes(self):
        @self.controllerRoute("/<string:{model}Id>")
        async def get{Model}ById({model}Id: str) -> Option[{Model}]:
            result = await {Model}Service.getById(UUID({model}Id))
            return result

        @self.controllerRoute("/all")
        async def getAll{Model}s() -> Option[list[{Model}]]:
            result = await {Model}Service.getAll()
            return result


        @self.controllerRoute("/template")
        async def get{Model}Template():
            result = Option({Model}.getTemplate())
            return result


        @self.controllerRoute("", "Admin", methods=["POST"], entityType={Model})
        async def upsert{Model}({model}: {Model}) -> Option[{Model}]:
            result = await {Model}Service.upsert({model})
            return result


        @self.controllerRoute("/<string:{model}Id>", "Admin", methods=["DELETE"])
        async def delete{Model}({model}Id: str) -> Option[bool]:
            result = await {Model}Service.deleteById(UUID({model}Id))
            return result